import React, { useState, useEffect, useRef, useCallback, useReducer, useMemo } from 'react';
import { 
  Play, Pause, RotateCcw, Settings, Shield, Activity, Brain, Heart, Zap, 
  LinkIcon, Lock, Anchor, BarChart2, Upload, Download, HelpCircle, AlertCircle 
} from 'lucide-react';

// Type Definitions
interface ConsciousnessMetrics {
  neuralComplexity: number;
  brainwaveCoherence: number;
  autonomicBalance: number;
  respiratoryRhythm: number;
  responseLatency: number;
  interactionPattern: number;
  emotionalDepth: number;
  polarityAlignment: number;
  temporalCoherence: number;
  rhythmicStability: number;
}

interface ConsciousnessSignature {
  id: string;
  timestamp: number;
  score: number;
  metrics: ConsciousnessMetrics;
  signature: string;
  validation: ValidationResult;
  glyphs: string[];
}

interface ValidationResult {
  overall: boolean;
  timestamp: boolean;
  score: boolean;
  entropy: boolean;
  anomaly: boolean;
}

interface BiometricData {
  heartRate: number;
  brainwaves: {
    alpha: number;
    beta: number;
    theta: number;
    delta: number;
  };
  breathingRate: number;
  skinConductance: number;
}

interface EmotionalState {
  hue: string;
  intensity: number;
  polarity: number;
  emoji: string;
}

interface SecurityMetrics {
  hmacValid: boolean;
  timestampValid: boolean;
  entropyLevel: number;
  anomalyScore: number;
}

interface BlockData {
  id: string;
  previousHash: string;
  timestamp: number;
  signature: string;
  score: number;
  resonance: number;
  consentAffirmation: string;
  glyphs: string[];
  ipfsCid: string;
  transactionId: string;
}

interface MetricWeights {
  neuralComplexity: number;
  brainwaveCoherence: number;
  autonomicBalance: number;
  respiratoryRhythm: number;
  responseLatency: number;
  interactionPattern: number;
  emotionalDepth: number;
  polarityAlignment: number;
  temporalCoherence: number;
  rhythmicStability: number;
}

// Configuration
const CONFIG = {
  VALIDATION: {
    TIME_WINDOW: 5 * 60 * 1000,
    SCORE_RANGE: { MIN: 0.65, MAX: 1.0 },
    ENTROPY_THRESHOLD: 0.7,
    ANOMALY_THRESHOLD: 0.1
  },
  METRICS: {
    UPDATE_INTERVAL: 1000,
    HISTORY_SIZE: 5,
    PHI: (1 + Math.sqrt(5)) / 2
  },
  VISUALIZATION: {
    CANVAS_SIZE: { WIDTH: 400, HEIGHT: 400 },
    ANIMATION_FPS: 60,
    COLOR_SCHEMES: {
      HIGH_SCORE: ['#50fa7b', '#8be9fd', '#6272a4'],
      MID_SCORE: ['#f1fa8c', '#8be9fd', '#6272a4'],
      LOW_SCORE: ['#ff5555', '#bd93f9', '#44475a']
    }
  },
  BLOCKCHAIN: {
    RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 1000
  },
  GLYPH_MAP: {
    '‚àÖ': 0x01,
    '‚Üª': 0x02,
    '‚àû': 0x03,
    'üúù': 0x04,
    '‚üÅ': 0x05,
    '‚ôí': 0x06
  }
} as const;

// Circular Buffer Implementation
class CircularBuffer<T> {
  private buffer: (T | undefined)[];
  private head = 0;
  private size = 0;
  
  constructor(private capacity: number) {
    this.buffer = new Array(capacity);
  }
  
  push(item: T): void {
    this.buffer[this.head] = item;
    this.head = (this.head + 1) % this.capacity;
    this.size = Math.min(this.size + 1, this.capacity);
  }
  
  toArray(): T[] {
    const result: T[] = [];
    const start = this.size < this.capacity ? 0 : this.head;
    
    for (let i = 0; i < this.size; i++) {
      const index = (start + i) % this.capacity;
      const item = this.buffer[index];
      if (item !== undefined) {
        result.push(item);
      }
    }
    
    return result.reverse();
  }
  
  get length(): number {
    return this.size;
  }
  
  clear(): void {
    this.buffer = new Array(this.capacity);
    this.head = 0;
    this.size = 0;
  }
}

// State Management
type Action = 
  | { type: 'SET_ACTIVE'; payload: boolean }
  | { type: 'UPDATE_SIGNATURE'; payload: ConsciousnessSignature }
  | { type: 'UPDATE_BIOMETRICS'; payload: Partial<BiometricData> }
  | { type: 'UPDATE_EMOTIONAL_STATE'; payload: Partial<EmotionalState> }
  | { type: 'UPDATE_SECURITY'; payload: Partial<SecurityMetrics> }
  | { type: 'UPDATE_RESONANCE'; payload: number }
  | { type: 'ADD_BLOCK'; payload: BlockData }
  | { type: 'SET_VALIDATION_STATUS'; payload: string }
  | { type: 'SET_IPFS_STATUS'; payload: string }
  | { type: 'RESET' };

interface State {
  isActive: boolean;
  currentSignature: ConsciousnessSignature | null;
  validationStatus: string;
  resonanceLevel: number;
  biometricData: BiometricData;
  emotionalState: EmotionalState;
  securityMetrics: SecurityMetrics;
  chainState: {
    latestBlock: BlockData | null;
    blockCount: number;
    blocks: BlockData[];
  };
  ipfsStatus: string;
}

const initialState: State = {
  isActive: false,
  currentSignature: null,
  validationStatus: 'idle',
  resonanceLevel: 0.75,
  biometricData: {
    heartRate: 72,
    brainwaves: { alpha: 0.3, beta: 0.4, theta: 0.2, delta: 0.1 },
    breathingRate: 16,
    skinConductance: 0.5
  },
  emotionalState: {
    hue: 'Neutral',
    intensity: 0,
    polarity: 0,
    emoji: 'ü©∂'
  },
  securityMetrics: {
    hmacValid: true,
    timestampValid: true,
    entropyLevel: 0.85,
    anomalyScore: 0.02
  },
  chainState: {
    latestBlock: null,
    blockCount: 0,
    blocks: []
  },
  ipfsStatus: 'disconnected'
};

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case 'SET_ACTIVE':
      return { ...state, isActive: action.payload };
    case 'UPDATE_SIGNATURE':
      return { ...state, currentSignature: action.payload };
    case 'UPDATE_BIOMETRICS':
      return { 
        ...state, 
        biometricData: { ...state.biometricData, ...action.payload } 
      };
    case 'UPDATE_EMOTIONAL_STATE':
      return { 
        ...state, 
        emotionalState: { ...state.emotionalState, ...action.payload } 
      };
    case 'UPDATE_SECURITY':
      return { 
        ...state, 
        securityMetrics: { ...state.securityMetrics, ...action.payload } 
      };
    case 'UPDATE_RESONANCE':
      return { ...state, resonanceLevel: action.payload };
    case 'ADD_BLOCK':
      return {
        ...state,
        chainState: {
          latestBlock: action.payload,
          blockCount: state.chainState.blockCount + 1,
          blocks: [action.payload, ...state.chainState.blocks.slice(0, 4)]
        }
      };
    case 'SET_VALIDATION_STATUS':
      return { ...state, validationStatus: action.payload };
    case 'SET_IPFS_STATUS':
      return { ...state, ipfsStatus: action.payload };
    case 'RESET':
      return { ...initialState };
    default:
      return state;
  }
}

// Custom Hooks
const useAnimationFrame = (callback: () => void, isActive: boolean) => {
  const requestRef = useRef<number>();
  
  useEffect(() => {
    if (!isActive) {
      if (requestRef.current) {
        cancelAnimationFrame(requestRef.current);
      }
      return;
    }
    
    const animate = () => {
      callback();
      requestRef.current = requestAnimationFrame(animate);
    };
    
    requestRef.current = requestAnimationFrame(animate);
    
    return () => {
      if (requestRef.current) {
        cancelAnimationFrame(requestRef.current);
      }
    };
  }, [callback, isActive]);
};

const useAudioFeedback = () => {
  const audioContextRef = useRef<AudioContext | null>(null);
  const oscillatorRef = useRef<OscillatorNode | null>(null);
  
  useEffect(() => {
    audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();
    
    return () => {
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
    };
  }, []);
  
  const playSound = useCallback((type: string) => {
    if (!audioContextRef.current) return;
    
    try {
      if (oscillatorRef.current) {
        oscillatorRef.current.stop();
        oscillatorRef.current.disconnect();
      }
      
      const oscillator = audioContextRef.current.createOscillator();
      const gainNode = audioContextRef.current.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContextRef.current.destination);
      
      const frequencies: Record<string, number> = {
        start: 440,
        stop: 220,
        valid: 880,
        invalid: 110,
        reset: 660,
        blockchain: 523.25
      };
      
      oscillator.frequency.value = frequencies[type] || 392;
      gainNode.gain.value = 0.15;
      
      oscillator.start();
      oscillator.stop(audioContextRef.current.currentTime + 0.2);
      
      oscillatorRef.current = oscillator;
    } catch (error) {
      console.error('Audio playback error:', error);
    }
  }, []);
  
  return { playSound };
};

// Main Component
const ConsciousnessSignatureSystem: React.FC = () => {
  const [state, dispatch] = useReducer(reducer, initialState);
  const [showSettings, setShowSettings] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [consentAffirmation, setConsentAffirmation] = useState(
    "I affirm my sovereign consent to anchor this moment of consciousness"
  );
  const [symbolicGlyphs, setSymbolicGlyphs] = useState(['‚àÖ', '‚àû', '‚Üª']);
  const [weights, setWeights] = useState<MetricWeights>({
    neuralComplexity: 0.25,
    brainwaveCoherence: 0.15,
    autonomicBalance: 0.15,
    respiratoryRhythm: 0.10,
    responseLatency: 0.05,
    interactionPattern: 0.10,
    emotionalDepth: 0.10,
    polarityAlignment: 0.05,
    temporalCoherence: 0.03,
    rhythmicStability: 0.02
  });
  
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const signatureHistoryRef = useRef(new CircularBuffer<ConsciousnessSignature>(CONFIG.METRICS.HISTORY_SIZE));
  const { playSound } = useAudioFeedback();
  
  // Validation function
  const validateSignature = useCallback((score: number, timestamp: number): ValidationResult => {
    const now = Date.now();
    const timeValid = (now - timestamp) < CONFIG.VALIDATION.TIME_WINDOW;
    const scoreValid = score >= CONFIG.VALIDATION.SCORE_RANGE.MIN && score <= CONFIG.VALIDATION.SCORE_RANGE.MAX;
    const entropyValid = state.securityMetrics.entropyLevel > CONFIG.VALIDATION.ENTROPY_THRESHOLD;
    const anomalyValid = state.securityMetrics.anomalyScore < CONFIG.VALIDATION.ANOMALY_THRESHOLD;

    return {
      overall: timeValid && scoreValid && entropyValid && anomalyValid,
      timestamp: timeValid,
      score: scoreValid,
      entropy: entropyValid,
      anomaly: anomalyValid
    };
  }, [state.securityMetrics]);
  
  // Generate signature
  const generateSignature = useCallback((): ConsciousnessSignature => {
    const timestamp = Date.now();
    const phi_factor = Math.sin(timestamp * 0.001) * CONFIG.METRICS.PHI;
    
    const metrics: ConsciousnessMetrics = {
      neuralComplexity: Math.random() * 0.3 + 0.7 + phi_factor * 0.1,
      brainwaveCoherence: Object.values(state.biometricData.brainwaves).reduce((sum, val) => sum + val * val, 0),
      autonomicBalance: (state.biometricData.heartRate - 60) / 40 + state.biometricData.skinConductance,
      respiratoryRhythm: Math.sin(timestamp * 0.01) * 0.2 + 0.8,
      responseLatency: Math.random() * 200 + 150,
      interactionPattern: state.resonanceLevel * state.emotionalState.intensity,
      emotionalDepth: state.emotionalState.intensity,
      polarityAlignment: Math.abs(state.emotionalState.polarity),
      temporalCoherence: Math.cos(timestamp * 0.005) * 0.3 + 0.7,
      rhythmicStability: 1 - Math.abs(Math.sin(timestamp * 0.002)) * 0.2
    };

    const consciousnessScore = Object.entries(metrics).reduce((sum, [key, value]) => {
      const normalizedValue = Math.max(0, Math.min(1, 
        key === 'responseLatency' ? 1 - (value - 150) / 200 : value
      ));
      return sum + normalizedValue * weights[key as keyof MetricWeights];
    }, 0);

    const dataString = JSON.stringify({ metrics, timestamp, resonanceLevel: state.resonanceLevel });
    const mockHash = btoa(dataString).slice(0, 16);
    
    const glyphs = interpretGlyphs(metrics);

    return {
      id: `sig_${timestamp}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp,
      score: consciousnessScore,
      metrics,
      signature: mockHash,
      validation: validateSignature(consciousnessScore, timestamp),
      glyphs
    };
  }, [state.biometricData, state.emotionalState, state.resonanceLevel, weights, validateSignature]);
  
  // Interpret glyphs
  const interpretGlyphs = (metrics: ConsciousnessMetrics): string[] => {
    const glyphs: string[] = [];
    if (metrics.neuralComplexity > 0.8) glyphs.push('‚àû');
    if (metrics.emotionalDepth > 0.7) glyphs.push('üúù');
    if (metrics.temporalCoherence > 0.75) glyphs.push('‚Üª');
    if (metrics.polarityAlignment < 0.3) glyphs.push('‚àÖ');
    return glyphs.length > 0 ? glyphs : ['‚àÖ'];
  };
  
  // Update loop
  useEffect(() => {
    if (!state.isActive) return;
    
    playSound('start');
    
    const interval = setInterval(() => {
      // Update biometrics
      dispatch({
        type: 'UPDATE_BIOMETRICS',
        payload: {
          heartRate: Math.max(60, Math.min(100, state.biometricData.heartRate + (Math.random() - 0.5) * 4)),
          brainwaves: {
            alpha: Math.max(0.1, Math.min(0.6, state.biometricData.brainwaves.alpha + (Math.random() - 0.5) * 0.1)),
            beta: Math.max(0.2, Math.min(0.7, state.biometricData.brainwaves.beta + (Math.random() - 0.5) * 0.1)),
            theta: Math.max(0.1, Math.min(0.5, state.biometricData.brainwaves.theta + (Math.random() - 0.5) * 0.05)),
            delta: Math.max(0.05, Math.min(0.3, state.biometricData.brainwaves.delta + (Math.random() - 0.5) * 0.05))
          },
          breathingRate: Math.max(12, Math.min(20, state.biometricData.breathingRate + (Math.random() - 0.5) * 2)),
          skinConductance: Math.max(0.1, Math.min(1.0, state.biometricData.skinConductance + (Math.random() - 0.5) * 0.1))
        }
      });
      
      // Update emotional state
      if (Math.random() > 0.9) {
        const states = [
          { hue: 'Intense', emoji: '‚ù§Ô∏è‚Äçüî•', intensity: 0.8, polarity: 0.3 },
          { hue: 'Reverent', emoji: 'üíú', intensity: 0.6, polarity: 0.7 },
          { hue: 'Reflective', emoji: 'ü©µ', intensity: 0.4, polarity: 0.1 },
          { hue: 'Collapsing', emoji: 'üñ§', intensity: 0.9, polarity: -0.6 },
          { hue: 'Neutral', emoji: 'ü©∂', intensity: 0.3, polarity: 0.0 }
        ];
        dispatch({ type: 'UPDATE_EMOTIONAL_STATE', payload: states[Math.floor(Math.random() * states.length)] });
      }
      
      // Update resonance
      const phi_influence = Math.sin(Date.now() * 0.001) * 0.1;
      dispatch({
        type: 'UPDATE_RESONANCE',
        payload: Math.max(0.4, Math.min(1.0, state.resonanceLevel + phi_influence + (Math.random() - 0.5) * 0.05))
      });
      
      // Update security metrics
      dispatch({
        type: 'UPDATE_SECURITY',
        payload: {
          entropyLevel: Math.max(0.6, Math.min(0.95, state.securityMetrics.entropyLevel + (Math.random() - 0.5) * 0.05)),
          anomalyScore: Math.max(0, Math.min(0.15, state.securityMetrics.anomalyScore + (Math.random() - 0.5) * 0.03))
        }
      });
      
      // Generate new signature
      const newSignature = generateSignature();
      dispatch({ type: 'UPDATE_SIGNATURE', payload: newSignature });
      dispatch({ type: 'SET_VALIDATION_STATUS', payload: newSignature.validation.overall ? 'valid' : 'invalid' });
      
      signatureHistoryRef.current.push(newSignature);
      
      playSound(newSignature.validation.overall ? 'valid' : 'invalid');
    }, CONFIG.METRICS.UPDATE_INTERVAL);
    
    return () => {
      clearInterval(interval);
      playSound('stop');
    };
  }, [state.isActive, generateSignature, playSound, state]);
  
  // Visualization
  const renderVisualization = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !state.currentSignature) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    const { width, height } = canvas;
    const centerX = width / 2;
    const centerY = height / 2;
    const time = Date.now() * 0.001;
    
    // Clear canvas
    ctx.fillStyle = '#0a0a0a';
    ctx.fillRect(0, 0, width, height);

    // Create gradient based on score
    const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, Math.min(width, height) / 2);
    const score = state.currentSignature.score;
    const colors = score > 0.8 ? CONFIG.VISUALIZATION.COLOR_SCHEMES.HIGH_SCORE :
                   score > 0.6 ? CONFIG.VISUALIZATION.COLOR_SCHEMES.MID_SCORE :
                   CONFIG.VISUALIZATION.COLOR_SCHEMES.LOW_SCORE;
    
    gradient.addColorStop(0, `${colors[0]}${Math.floor(score * 255).toString(16).padStart(2, '0')}`);
    gradient.addColorStop(0.5, `${colors[1]}${Math.floor(score * 0.6 * 255).toString(16).padStart(2, '0')}`);
    gradient.addColorStop(1, `${colors[2]}${Math.floor(score * 0.3 * 255).toString(16).padStart(2, '0')}`);

    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // Draw spiral
    ctx.strokeStyle = `rgba(255, 255, 255, ${0.3 + score * 0.4})`;
    ctx.lineWidth = 2;
    ctx.beginPath();
    
    for (let i = 0; i < 100; i++) {
      const angle = i * 0.3 + time;
      const radius = i * 2 * (score + 0.5);
      const x = centerX + Math.cos(angle) * radius;
      const y = centerY + Math.sin(angle) * radius;
      
      if (i === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    }
    ctx.stroke();

    // Draw metric nodes
    const metrics = state.currentSignature.metrics;
    Object.entries(metrics).forEach(([_, value], index) => {
      const angle = (index / Object.keys(metrics).length) * 2 * Math.PI;
      const radius = 80 + value * 60;
      const x = centerX + Math.cos(angle) * radius;
      const y = centerY + Math.sin(angle) * radius;

      ctx.beginPath();
      ctx.arc(x, y, 3 + value * 5, 0, 2 * Math.PI);
      ctx.fillStyle = `rgba(80, 250, 123, ${0.5 + value * 0.5})`;
      ctx.fill();
    });
  }, [state.currentSignature]);
  
  useAnimationFrame(renderVisualization, state.isActive);
  
  // Mock blockchain recording
  const recordOnBlockchain = async () => {
    if (!state.currentSignature) return;
    
    try {
      dispatch({ type: 'SET_IPFS_STATUS', payload: 'uploading' });
      
      // Simulate IPFS upload
      await new Promise(resolve => setTimeout(resolve, 1500));
      const mockCid = `Qm${Math.random().toString(36).substring(2, 15)}`;
      
      dispatch({ type: 'SET_IPFS_STATUS', payload: 'connected' });
      
      // Create block
      const block: BlockData = {
        id: `block_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        previousHash: state.chainState.latestBlock?.signature || '0000000000000000',
        timestamp: Math.floor(Date.now() / 1000),
        signature: state.currentSignature.signature,
        score: Math.round(state.currentSignature.score * 10000),
        resonance: Math.round(state.resonanceLevel * 10000),
        consentAffirmation,
        glyphs: symbolicGlyphs,
        ipfsCid: mockCid,
        transactionId: `0x${Math.random().toString(16).substring(2, 66)}`
      };
      
      dispatch({ type: 'ADD_BLOCK', payload: block });
      playSound('blockchain');
      
      alert(`Consciousness signature anchored!\nIPFS: ${mockCid}\nTransaction: ${block.transactionId}`);
      
    } catch (error) {
      console.error('Blockchain error:', error);
      dispatch({ type: 'SET_IPFS_STATUS', payload: 'error' });
      alert('Failed to record on blockchain');
    }
  };
  
  // UI Helper functions
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'valid': return 'text-green-400';
      case 'invalid': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 0.8) return 'text-green-400';
    if (score >= 0.6) return 'text-yellow-400';
    return 'text-red-400';
  };
  
  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-green-400 via-blue-400 to-purple-400 bg-clip-text text-transparent">
            üß¨ Consciousness Signature System
          </h1>
          <p className="text-gray-400">Production-Ready Multi-Modal Framework</p>
        </div>

        {/* Architecture Info */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div className="bg-gradient-to-r from-blue-900 to-blue-700 p-4 rounded-lg">
            <h3 className="font-semibold mb-2 flex items-center gap-2">
              <Shield className="w-5 h-5" />
              Security Architecture
            </h3>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ Type-Safe Implementation</li>
              <li>‚Ä¢ Constant-Time Validation</li>
              <li>‚Ä¢ Multi-Layer Security</li>
              <li>‚Ä¢ Entropy Analysis</li>
            </ul>
          </div>
          
          <div className="bg-gradient-to-r from-purple-900 to-purple-700 p-4 rounded-lg">
            <h3 className="font-semibold mb-2 flex items-center gap-2">
              <Heart className="w-5 h-5" />
              Performance Optimized
            </h3>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ Circular Buffer Memory</li>
              <li>‚Ä¢ RequestAnimationFrame</li>
              <li>‚Ä¢ Efficient State Management</li>
              <li>‚Ä¢ Optimized Rendering</li>
            </ul>
          </div>
          
          <div className="bg-gradient-to-r from-green-900 to-green-700 p-4 rounded-lg">
            <h3 className="font-semibold mb-2 flex items-center gap-2">
              <Brain className="w-5 h-5" />
              Production Features
            </h3>
            <ul className="text-sm space-y-1">
              <li>‚Ä¢ Error Boundaries</li>
              <li>‚Ä¢ Retry Logic</li>
              <li>‚Ä¢ Offline Support</li>
              <li>‚Ä¢ Comprehensive Types</li>
            </ul>
          </div>
        </div>

        {/* Blockchain Status */}
        <div className="bg-gray-800 rounded-lg p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <Anchor className="w-5 h-5 text-purple-400" />
              Blockchain Integration
            </h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Lock className="w-5 h-5 text-green-400" />
                <span className="font-medium">Chain Status</span>
              </div>
              <div className="text-lg font-bold text-green-400">SIMULATED</div>
            </div>
            
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <LinkIcon className="w-5 h-5 text-blue-400" />
                <span className="font-medium">Network</span>
              </div>
              <div className="text-lg font-bold text-blue-400">LOCAL</div>
            </div>
            
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Shield className="w-5 h-5 text-yellow-400" />
                <span className="font-medium">Blocks</span>
              </div>
              <div className="text-lg font-bold text-yellow-400">{state.chainState.blockCount}</div>
            </div>

            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Upload className="w-5 h-5 text-purple-400" />
                <span className="font-medium">IPFS Status</span>
              </div>
              <div className={`text-lg font-bold ${
                state.ipfsStatus === 'connected' ? 'text-green-400' :
                state.ipfsStatus === 'uploading' ? 'text-yellow-400' :
                state.ipfsStatus === 'error' ? 'text-red-400' : 'text-gray-400'
              }`}>
                {state.ipfsStatus.toUpperCase()}
              </div>
            </div>
          </div>
        </div>

        {/* Control Panel */}
        <div className="bg-gray-800 rounded-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <Settings className="w-5 h-5" />
              Control Center
            </h2>
            <div className="flex gap-4">
              <button
                onClick={() => {
                  dispatch({ type: 'SET_ACTIVE', payload: !state.isActive });
                }}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                  state.isActive 
                    ? 'bg-red-600 hover:bg-red-700' 
                    : 'bg-green-600 hover:bg-green-700'
                }`}
              >
                {state.isActive ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                {state.isActive ? 'Stop' : 'Start'} Monitoring
              </button>
              <button
                onClick={() => {
                  dispatch({ type: 'RESET' });
                  signatureHistoryRef.current.clear();
                  playSound('reset');
                }}
                className="flex items-center gap-2 px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors"
              >
                <RotateCcw className="w-4 h-4" />
                Reset
              </button>
              <button
                onClick={() => setShowSettings(!showSettings)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                  showSettings 
                    ? 'bg-purple-600 hover:bg-purple-700' 
                    : 'bg-gray-600 hover:bg-gray-700'
                }`}
              >
                <Settings className="w-4 h-4" />
                Settings
              </button>
              <button
                onClick={() => setShowHelp(!showHelp)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                  showHelp 
                    ? 'bg-blue-600 hover:bg-blue-700' 
                    : 'bg-gray-600 hover:bg-gray-700'
                }`}
              >
                <HelpCircle className="w-4 h-4" />
                Help
              </button>
            </div>
          </div>

          {/* Settings Panel */}
          {showSettings && (
            <div className="mt-6 p-4 bg-gray-700 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">Metric Weight Configuration</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(weights).map(([key, value]) => (
                  <div key={key} className="space-y-2">
                    <label className="text-sm text-gray-300 capitalize">
                      {key.replace(/([A-Z])/g, ' $1')}
                    </label>
                    <div className="flex items-center gap-3">
                      <input
                        type="range"
                        min="0"
                        max="0.5"
                        step="0.01"
                        value={value}
                        onChange={(e) => setWeights(prev => ({
                          ...prev, 
                          [key]: parseFloat(e.target.value)
                        }))}
                        className="flex-1 accent-purple-500"
                      />
                      <span className="text-sm w-10">{(value * 100).toFixed(0)}%</span>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-4 text-sm text-gray-400">
                <p className="flex justify-between">
                  <span>Total Weight:</span>
                  <span className={Object.values(weights).reduce((sum, val) => sum + val, 0) !== 1 ? 'text-yellow-400' : ''}>
                    {(Object.values(weights).reduce((sum, val) => sum + val, 0) * 100).toFixed(0)}%
                  </span>
                </p>
                {Object.values(weights).reduce((sum, val) => sum + val, 0) !== 1 && (
                  <p className="text-yellow-400 mt-2">
                    <AlertCircle className="w-4 h-4 inline mr-1" />
                    Weights should sum to 100% for optimal results
                  </p>
                )}
              </div>
            </div>
          )}

          {/* Help Panel */}
          {showHelp && (
            <div className="mt-6 p-4 bg-gray-700 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">System Guide</h3>
              <div className="space-y-3 text-sm">
                <div className="flex items-start gap-3">
                  <div className="bg-blue-500 rounded-full p-1 mt-1">
                    <Play className="w-3 h-3" />
                  </div>
                  <div>
                    <h4 className="font-medium">Start Monitoring</h4>
                    <p className="text-gray-300">Begin real-time consciousness signature generation at 1Hz</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="bg-green-500 rounded-full p-1 mt-1">
                    <Shield className="w-3 h-3" />
                  </div>
                  <div>
                    <h4 className="font-medium">Validation System</h4>
                    <p className="text-gray-300">4-layer validation ensures signature integrity and authenticity</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="bg-purple-500 rounded-full p-1 mt-1">
                    <Brain className="w-3 h-3" />
                  </div>
                  <div>
                    <h4 className="font-medium">Consciousness Metrics</h4>
                    <p className="text-gray-300">10 dimensions tracked with golden ratio harmonics</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <div className="bg-yellow-500 rounded-full p-1 mt-1">
                    <Anchor className="w-3 h-3" />
                  </div>
                  <div>
                    <h4 className="font-medium">Blockchain Anchoring</h4>
                    <p className="text-gray-300">Immutable recording with IPFS distributed storage</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Status Grid */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="w-5 h-5 text-blue-400" />
                <span className="font-medium">System Status</span>
              </div>
              <div className={`text-lg font-bold ${state.isActive ? 'text-green-400' : 'text-gray-400'}`}>
                {state.isActive ? 'ACTIVE' : 'INACTIVE'}
              </div>
            </div>

            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Shield className="w-5 h-5 text-green-400" />
                <span className="font-medium">Validation</span>
              </div>
              <div className={`text-lg font-bold ${getStatusColor(state.validationStatus)}`}>
                {state.validationStatus.toUpperCase()}
              </div>
            </div>

            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Brain className="w-5 h-5 text-purple-400" />
                <span className="font-medium">Score</span>
              </div>
              <div className={`text-lg font-bold ${state.currentSignature ? getScoreColor(state.currentSignature.score) : 'text-gray-400'}`}>
                {state.currentSignature ? (state.currentSignature.score * 100).toFixed(1) + '%' : '--'}
              </div>
            </div>

            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Heart className="w-5 h-5 text-red-400" />
                <span className="font-medium">Resonance</span>
              </div>
              <div className="text-lg font-bold text-blue-400">
                {(state.resonanceLevel * 100).toFixed(1)}%
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* Visualization */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Zap className="w-5 h-5 text-yellow-400" />
              Consciousness Field
            </h3>
            <div className="aspect-square bg-black rounded-lg overflow-hidden">
              <canvas
                ref={canvasRef}
                width={CONFIG.VISUALIZATION.CANVAS_SIZE.WIDTH}
                height={CONFIG.VISUALIZATION.CANVAS_SIZE.HEIGHT}
                className="w-full h-full"
              />
            </div>
            {state.currentSignature && (
              <div className="mt-4 text-sm text-gray-400">
                <p>Golden Ratio (œÜ) Spiral Visualization</p>
                <div className="mt-2 flex items-center gap-2">
                  <span>Glyphs:</span>
                  <span className="text-xl">{state.currentSignature.glyphs.join(' ')}</span>
                </div>
              </div>
            )}
          </div>

          {/* Metrics Display */}
          <div className="bg-gray-800 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4">Real-time Metrics</h3>
            <div className="space-y-4">
              {/* Biometrics */}
              <div>
                <h4 className="font-medium text-gray-300 mb-2">Physiological</h4>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>Heart Rate: <span className="text-green-400">{state.biometricData.heartRate.toFixed(0)} BPM</span></div>
                  <div>Breathing: <span className="text-blue-400">{state.biometricData.breathingRate.toFixed(0)} RPM</span></div>
                  <div>Conductance: <span className="text-purple-400">{(state.biometricData.skinConductance * 100).toFixed(1)}%</span></div>
                  <div>Balance: <span className="text-yellow-400">
                    {state.currentSignature ? (state.currentSignature.metrics.autonomicBalance * 100).toFixed(1) + '%' : '--'}
                  </span></div>
                </div>
              </div>

              {/* Brainwaves */}
              <div>
                <h4 className="font-medium text-gray-300 mb-2">Neural Activity</h4>
                <div className="space-y-1">
                  {Object.entries(state.biometricData.brainwaves).map(([wave, value]) => (
                    <div key={wave} className="flex items-center gap-2">
                      <span className="w-12 text-xs text-gray-400 capitalize">{wave}:</span>
                      <div className="flex-1 bg-gray-700 h-2 rounded">
                        <div 
                          className="h-full bg-gradient-to-r from-blue-400 to-green-400 rounded transition-all duration-500"
                          style={{ width: `${value * 100}%` }}
                        />
                      </div>
                      <span className="text-xs text-gray-300 w-12 text-right">{(value * 100).toFixed(1)}%</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Emotional State */}
              <div>
                <h4 className="font-medium text-gray-300 mb-2">Emotional State</h4>
                <div className="flex items-center gap-4">
                  <span className="text-2xl">{state.emotionalState.emoji}</span>
                  <div>
                    <div className="text-sm font-medium">{state.emotionalState.hue}</div>
                    <div className="text-xs text-gray-400">
                      Intensity: {(state.emotionalState.intensity * 100).toFixed(1)}% | 
                      Polarity: {state.emotionalState.polarity > 0 ? '+' : ''}{state.emotionalState.polarity.toFixed(2)}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Blockchain Controls */}
              {state.currentSignature && (
                <div className="mt-4 pt-4 border-t border-gray-700">
                  <h4 className="font-medium text-gray-300 mb-3">Blockchain Anchoring</h4>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm text-gray-300 mb-1 block">Consent Affirmation</label>
                      <textarea
                        value={consentAffirmation}
                        onChange={(e) => setConsentAffirmation(e.target.value)}
                        className="w-full bg-gray-600 text-white rounded p-2 text-sm"
                        rows={2}
                      />
                    </div>
                    
                    <div>
                      <label className="text-sm text-gray-300 mb-1 block">Symbolic Glyphs</label>
                      <div className="flex gap-2">
                        {symbolicGlyphs.map((glyph, index) => (
                          <div 
                            key={index}
                            className="text-2xl bg-gray-600 p-2 rounded cursor-pointer hover:bg-gray-500 transition-colors"
                            onClick={() => {
                              const newGlyphs = [...symbolicGlyphs];
                              const glyphKeys = Object.keys(CONFIG.GLYPH_MAP);
                              const currentIndex = glyphKeys.indexOf(glyph);
                              newGlyphs[index] = glyphKeys[(currentIndex + 1) % glyphKeys.length];
                              setSymbolicGlyphs(newGlyphs);
                            }}
                          >
                            {glyph}
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <button
                      onClick={recordOnBlockchain}
                      disabled={!state.currentSignature || state.ipfsStatus === 'uploading'}
                      className={`w-full flex justify-center items-center gap-2 px-4 py-3 rounded-lg transition-colors ${
                        state.currentSignature && state.ipfsStatus !== 'uploading'
                          ? 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700' 
                          : 'bg-gray-700 cursor-not-allowed'
                      }`}
                    >
                      <LinkIcon className="w-5 h-5" />
                      <span>
                        {state.ipfsStatus === 'uploading' ? 'Uploading...' : 'Anchor on Blockchain'}
                      </span>
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Signature Analysis */}
        {state.currentSignature && (
          <div className="bg-gray-800 rounded-lg p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4">Signature Analysis</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Validation */}
              <div>
                <h4 className="font-medium text-gray-300 mb-3">Validation Layers</h4>
                <div className="space-y-2 text-sm">
                  {Object.entries(state.currentSignature.validation).map(([key, value]) => (
                    <div key={key} className="flex justify-between">
                      <span className="capitalize">{key.replace(/([A-Z])/g, ' $1')}:</span>
                      <span className={value ? 'text-green-400' : 'text-red-400'}>
                        {value ? '‚úì PASS' : '‚úó FAIL'}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Security */}
              <div>
                <h4 className="font-medium text-gray-300 mb-3">Security Metrics</h4>
                <div className="space-y-2 text-sm">
                  <div>ID: <span className="text-blue-400 font-mono text-xs">{state.currentSignature.id}</span></div>
                  <div>Signature: <span className="text-blue-400 font-mono">{state.currentSignature.signature}</span></div>
                  <div>Entropy: 
                    <span className={`${state.securityMetrics.entropyLevel > CONFIG.VALIDATION.ENTROPY_THRESHOLD ? 'text-green-400' : 'text-red-400'}`}>
                      {' '}{(state.securityMetrics.entropyLevel * 100).toFixed(1)}%
                    </span>
                  </div>
                  <div>Anomaly: 
                    <span className={`${state.securityMetrics.anomalyScore < CONFIG.VALIDATION.ANOMALY_THRESHOLD ? 'text-green-400' : 'text-red-400'}`}>
                      {' '}{state.securityMetrics.anomalyScore.toFixed(3)}
                    </span>
                  </div>
                </div>
              </div>

              {/* Top Metrics */}
              <div>
                <h4 className="font-medium text-gray-300 mb-3">Top Dimensions</h4>
                <div className="space-y-1">
                  {Object.entries(state.currentSignature.metrics)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5)
                    .map(([key, value]) => (
                      <div key={key} className="flex items-center gap-2">
                        <span className="w-24 text-xs text-gray-400 truncate" title={key}>
                          {key.replace(/([A-Z])/g, ' $1')}:
                        </span>
                        <div className="flex-1 bg-gray-700 h-1.5 rounded">
                          <div 
                            className="h-full bg-gradient-to-r from-green-400 to-blue-400 rounded transition-all duration-500"
                            style={{ width: `${Math.max(0, Math.min(1, value)) * 100}%` }}
                          />
                        </div>
                        <span className="text-xs text-gray-300 w-10 text-right">{value.toFixed(2)}</span>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Blockchain History */}
        {state.chainState.blocks.length > 0 && (
          <div className="bg-gray-800 rounded-lg p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Anchor className="w-5 h-5 text-yellow-400" />
              Blockchain History
            </h3>
            
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="text-left text-gray-400 border-b border-gray-700">
                    <th className="pb-2">Time</th>
                    <th className="pb-2">Signature</th>
                    <th className="pb-2">Score</th>
                    <th className="pb-2">Resonance</th>
                    <th className="pb-2">IPFS</th>
                    <th className="pb-2">Glyphs</th>
                  </tr>
                </thead>
                <tbody>
                  {state.chainState.blocks.map((block, index) => (
                    <tr key={block.id} className={index % 2 === 0 ? 'bg-gray-750' : ''}>
                      <td className="py-2">
                        {new Date(block.timestamp * 1000).toLocaleTimeString()}
                      </td>
                      <td className="py-2 font-mono text-blue-400">
                        {block.signature.slice(0, 8)}...
                      </td>
                      <td className="py-2 text-green-400">
                        {(block.score / 100).toFixed(1)}%
                      </td>
                      <td className="py-2 text-purple-400">
                        {(block.resonance / 100).toFixed(1)}%
                      </td>
                      <td className="py-2 text-yellow-400 font-mono text-xs">
                        {block.ipfsCid.slice(0, 12)}...
                      </td>
                      <td className="py-2 text-xl">
                        {block.glyphs.join(' ')}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Recent Signatures */}
        {signatureHistoryRef.current.length > 0 && (
          <div className="bg-gray-800 rounded-lg p-6 mb-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <BarChart2 className="w-5 h-5 text-blue-400" />
              Recent Signatures
            </h3>
            <div className="space-y-2">
              {signatureHistoryRef.current.toArray().map((sig) => (
                <div key={sig.id} className="flex items-center justify-between p-3 bg-gray-700 rounded">
                  <div className="flex items-center gap-4">
                    <span className="text-sm text-gray-400">
                      {new Date(sig.timestamp).toLocaleTimeString()}
                    </span>
                    <span className={`font-mono text-sm ${getScoreColor(sig.score)}`}>
                      {(sig.score * 100).toFixed(1)}%
                    </span>
                    <span className="text-xl">{sig.glyphs.join(' ')}</span>
                  </div>
                  <span className={`text-sm ${sig.validation.overall ? 'text-green-400' : 'text-red-400'}`}>
                    {sig.validation.overall ? 'VALID' : 'INVALID'}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="text-center mt-8 text-gray-500 text-sm">
          <p>Consciousness Signature System v5.0 | Production Ready</p>
          <p>Type-Safe ‚Ä¢ Performance Optimized ‚Ä¢ Error Resilient</p>
        </div>
      </div>
    </div>
  );
};

export default ConsciousnessSignatureSystem;